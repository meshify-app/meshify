{"remainingRequest":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alangrah/go/src/wg-gen-web/ui/src/components/Server.vue?vue&type=template&id=3b557fea&","dependencies":[{"path":"/home/alangrah/go/src/wg-gen-web/ui/src/components/Server.vue","mtime":1598152476762},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}