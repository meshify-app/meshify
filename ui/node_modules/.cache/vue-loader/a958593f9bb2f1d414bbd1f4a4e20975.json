{"remainingRequest":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alangrah/go/src/wg-gen-web/ui/src/components/Server.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alangrah/go/src/wg-gen-web/ui/src/components/Server.vue","mtime":1598152476762},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alangrah/go/src/wg-gen-web/ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7bWFwQWN0aW9ucywgbWFwR2V0dGVyc30gZnJvbSAidnVleCI7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ1NlcnZlcicsCgogIGRhdGE6ICgpID0+ICh7CgogIH0pLAoKICBjb21wdXRlZDp7CiAgICAuLi5tYXBHZXR0ZXJzKHsKICAgICAgc2VydmVyOiAnc2VydmVyL3NlcnZlcicsCiAgICAgIGNvbmZpZzogJ3NlcnZlci9jb25maWcnLAogICAgICBjbGllbnRzOiAnY2xpZW50L2NsaWVudHMnLAogICAgfSksCiAgfSwKCiAgbW91bnRlZCAoKSB7CiAgICB0aGlzLnJlYWRTZXJ2ZXIoKQogIH0sCgogIG1ldGhvZHM6IHsKICAgIC4uLm1hcEFjdGlvbnMoJ3NlcnZlcicsIHsKICAgICAgZXJyb3JTZXJ2ZXI6ICdlcnJvcicsCiAgICAgIHJlYWRTZXJ2ZXI6ICdyZWFkJywKICAgICAgdXBkYXRlU2VydmVyOiAndXBkYXRlJywKICAgIH0pLAoKICAgIC4uLm1hcEFjdGlvbnMoJ2NsaWVudCcsIHsKICAgICAgdXBkYXRlQ2xpZW50OiAndXBkYXRlJywKICAgIH0pLAoKICAgIGFwcGx5R2xvYmFscygpewogICAgICB0aGlzLnVwZGF0ZSgpCgogICAgICB0aGlzLmNsaWVudHMuZm9yRWFjaChjbGllbnQgPT4gewogICAgICAgIGNsaWVudC5hbGxvd2VkaXBzID0gdGhpcy5zZXJ2ZXIuYWxsb3dlZGlwcwogICAgICAgIHRoaXMudXBkYXRlQ2xpZW50KGNsaWVudCkKICAgICAgfSkKICAgIH0sCgogICAgdXBkYXRlKCkgewogICAgICAvLyBjb252ZXJ0IGludCB2YWx1ZXMKICAgICAgdGhpcy5zZXJ2ZXIubGlzdGVuUG9ydCA9IHBhcnNlSW50KHRoaXMuc2VydmVyLmxpc3RlblBvcnQsIDEwKTsKICAgICAgdGhpcy5zZXJ2ZXIucGVyc2lzdGVudEtlZXBhbGl2ZSA9IHBhcnNlSW50KHRoaXMuc2VydmVyLnBlcnNpc3RlbnRLZWVwYWxpdmUsIDEwKTsKICAgICAgdGhpcy5zZXJ2ZXIubXR1ID0gcGFyc2VJbnQodGhpcy5zZXJ2ZXIubXR1LCAxMCk7CgogICAgICAvLyBjaGVjayBzZXJ2ZXIgYWRkcmVzc2VzCiAgICAgIGlmICh0aGlzLnNlcnZlci5hZGRyZXNzLmxlbmd0aCA8IDEpIHsKICAgICAgICB0aGlzLmVycm9yU2VydmVyKCdQbGVhc2UgcHJvdmlkZSBhdCBsZWFzdCBvbmUgdmFsaWQgQ0lEUiBhZGRyZXNzIGZvciBzZXJ2ZXIgaW50ZXJmYWNlJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZXJ2ZXIuYWRkcmVzcy5sZW5ndGg7IGkrKyl7CiAgICAgICAgaWYgKHRoaXMuJGlzQ2lkcih0aGlzLnNlcnZlci5hZGRyZXNzW2ldKSA9PT0gMCkgewogICAgICAgICAgdGhpcy5lcnJvclNlcnZlcihgSW52YWxpZCBDSURSIGRldGVjdGVkLCBwbGVhc2UgY29ycmVjdCAke3RoaXMuc2VydmVyLmFkZHJlc3NbaV19IGJlZm9yZSBzdWJtaXR0aW5nYCk7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIGNoZWNrIEROUyBjb3JyZWN0CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZXJ2ZXIuZG5zLmxlbmd0aDsgaSsrKXsKICAgICAgICBpZiAodGhpcy4kaXNDaWRyKHRoaXMuc2VydmVyLmRuc1tpXSArICcvMzInKSA9PT0gMCkgewogICAgICAgICAgdGhpcy5lcnJvclNlcnZlcihgSW52YWxpZCBJUCBkZXRlY3RlZCwgcGxlYXNlIGNvcnJlY3QgJHt0aGlzLnNlcnZlci5kbnNbaV19IGJlZm9yZSBzdWJtaXR0aW5nYCk7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIGNoZWNrIGNsaWVudCBBbGxvd2VkSVBzCiAgICAgIGlmICh0aGlzLnNlcnZlci5hbGxvd2VkaXBzLmxlbmd0aCA8IDEpIHsKICAgICAgICB0aGlzLmVycm9yU2VydmVyKCdQbGVhc2UgcHJvdmlkZSBhdCBsZWFzdCBvbmUgdmFsaWQgQ0lEUiBhZGRyZXNzIGZvciBjbGllbnQgYWxsb3dlZCBJUHMnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlcnZlci5hbGxvd2VkaXBzLmxlbmd0aDsgaSsrKXsKICAgICAgICBpZiAodGhpcy4kaXNDaWRyKHRoaXMuc2VydmVyLmFsbG93ZWRpcHNbaV0pID09PSAwKSB7CiAgICAgICAgICB0aGlzLmVycm9yU2VydmVyKCdJbnZhbGlkIENJRFIgZGV0ZWN0ZWQsIHBsZWFzZSBjb3JyZWN0IGJlZm9yZSBzdWJtaXR0aW5nJyk7CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMudXBkYXRlU2VydmVyKHRoaXMuc2VydmVyKQogICAgfSwKCiAgICBmb3JjZUZpbGVEb3dubG9hZCgpewogICAgICBjb25zdCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbdGhpcy5jb25maWddKSkKICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKQogICAgICBsaW5rLmhyZWYgPSB1cmwKICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgJ3dnMC5jb25mJykgLy9vciBhbnkgb3RoZXIgZXh0ZW5zaW9uCiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluaykKICAgICAgbGluay5jbGljaygpCiAgICB9LAogIH0KfTsK"},{"version":3,"sources":["Server.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqLA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Server.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container v-if=\"server\">\n        <v-row>\n            <v-col cols=\"12\">\n                <v-card dark>\n                    <v-card-title>\n                        Server's interface configuration\n                    </v-card-title>\n                    <div class=\"d-flex flex-no-wrap justify-space-between\">\n                        <v-col cols=\"12\">\n                            <v-text-field\n                                    v-model=\"server.publicKey\"\n                                    label=\"Public key\"\n                                    disabled\n                            />\n                            <v-text-field\n                                    v-model=\"server.listenPort\"\n                                    type=\"number\"\n                                    :rules=\"[\n                          v => !!v || 'Listen port is required',\n                        ]\"\n                                    label=\"Listen port\"\n                                    required\n                            />\n                            <v-combobox\n                                    v-model=\"server.address\"\n                                    chips\n                                    hint=\"Write IPv4 or IPv6 CIDR and hit enter\"\n                                    label=\"Server interface addresses\"\n                                    multiple\n                                    dark\n                            >\n                                <template v-slot:selection=\"{ attrs, item, select, selected }\">\n                                    <v-chip\n                                            v-bind=\"attrs\"\n                                            :input-value=\"selected\"\n                                            close\n                                            @click=\"select\"\n                                            @click:close=\"server.address.splice(server.address.indexOf(item), 1)\"\n                                    >\n                                        <strong>{{ item }}</strong>&nbsp;\n                                    </v-chip>\n                                </template>\n                            </v-combobox>\n                        </v-col>\n                    </div>\n                </v-card>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-card dark>\n                    <v-card-title>\n                        Client's global configuration\n                        <v-spacer></v-spacer>\n                        <v-btn\n                                color=\"warning\"\n                                @click=\"applyGlobals\"\n                        >\n                            Apply globals to all clients\n                            <v-icon right dark>mdi-update</v-icon>\n                        </v-btn>\n                    </v-card-title>\n                    <div class=\"d-flex flex-no-wrap justify-space-between\">\n                        <v-col cols=\"12\">\n                            <v-text-field\n                                    v-model=\"server.endpoint\"\n                                    label=\"Public endpoint for clients to connect to\"\n                                    :rules=\"[\n                          v => !!v || 'Public endpoint for clients to connect to is required',\n                        ]\"\n                                    required\n                            />\n                            <v-combobox\n                                    v-model=\"server.dns\"\n                                    chips\n                                    hint=\"Write IPv4 or IPv6 address and hit enter\"\n                                    label=\"DNS servers for clients\"\n                                    multiple\n                                    dark\n                            >\n                                <template v-slot:selection=\"{ attrs, item, select, selected }\">\n                                    <v-chip\n                                            v-bind=\"attrs\"\n                                            :input-value=\"selected\"\n                                            close\n                                            @click=\"select\"\n                                            @click:close=\"server.dns.splice(server.dns.indexOf(item), 1)\"\n                                    >\n                                        <strong>{{ item }}</strong>&nbsp;\n                                    </v-chip>\n                                </template>\n                            </v-combobox>\n                            <v-combobox\n                                    v-model=\"server.allowedips\"\n                                    chips\n                                    hint=\"Write IPv4 or IPv6 address and hit enter\"\n                                    label=\"Default Allowed IPs for clients\"\n                                    multiple\n                                    dark\n                            >\n                                <template v-slot:selection=\"{ attrs, item, select, selected }\">\n                                    <v-chip\n                                            v-bind=\"attrs\"\n                                            :input-value=\"selected\"\n                                            close\n                                            @click=\"select\"\n                                            @click:close=\"server.allowedips.splice(server.allowedips.indexOf(item), 1)\"\n                                    >\n                                        <strong>{{ item }}</strong>&nbsp;\n                                    </v-chip>\n                                </template>\n                            </v-combobox>\n                            <v-text-field\n                                    type=\"number\"\n                                    v-model=\"server.mtu\"\n                                    label=\"Define global MTU\"\n                                    hint=\"Leave at 0 and let wg-quick take care of MTU\"\n                            />\n                            <v-text-field\n                                    type=\"number\"\n                                    v-model=\"server.persistentKeepalive\"\n                                    label=\"Persistent keepalive\"\n                                    hint=\"Leave at 0 if you dont want to specify persistent keepalive\"\n                            />\n                        </v-col>\n                    </div>\n                </v-card>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-col cols=\"12\">\n                <v-card dark>\n                    <v-card-title>\n                        Interface configuration hooks\n                    </v-card-title>\n                    <div class=\"d-flex flex-no-wrap justify-space-between\">\n                        <v-col cols=\"12\">\n                            <v-text-field\n                                    v-model=\"server.preUp\"\n                                    label=\"PreUp: script snippets which will be executed by bash before setting up the interface\"\n                            />\n                            <v-text-field\n                                    v-model=\"server.postUp\"\n                                    label=\"PostUp: script snippets which will be executed by bash after setting up the interface\"\n                            />\n                            <v-text-field\n                                    v-model=\"server.preDown\"\n                                    label=\"PreDown: script snippets which will be executed by bash before setting down the interface\"\n                            />\n                            <v-text-field\n                                    v-model=\"server.postDown \"\n                                    label=\"PostDown : script snippets which will be executed by bash after setting down the interface\"\n                            />\n                        </v-col>\n                    </div>\n                </v-card>\n            </v-col>\n        </v-row>\n        <v-row>\n            <v-divider dark/>\n            <v-btn\n                    class=\"ma-2\"\n                    color=\"success\"\n                    v-on:click=\"forceFileDownload()\"\n            >\n                Download server configuration\n                <v-icon right dark>mdi-cloud-download-outline</v-icon>\n            </v-btn>\n            <v-spacer></v-spacer>\n            <v-btn\n                    class=\"ma-2\"\n                    color=\"warning\"\n                    @click=\"update\"\n            >\n                Update server configuration\n                <v-icon right dark>mdi-update</v-icon>\n            </v-btn>\n            <v-divider dark/>\n        </v-row>\n    </v-container>\n</template>\n<script>\n  import {mapActions, mapGetters} from \"vuex\";\n\n  export default {\n    name: 'Server',\n\n    data: () => ({\n\n    }),\n\n    computed:{\n      ...mapGetters({\n        server: 'server/server',\n        config: 'server/config',\n        clients: 'client/clients',\n      }),\n    },\n\n    mounted () {\n      this.readServer()\n    },\n\n    methods: {\n      ...mapActions('server', {\n        errorServer: 'error',\n        readServer: 'read',\n        updateServer: 'update',\n      }),\n\n      ...mapActions('client', {\n        updateClient: 'update',\n      }),\n\n      applyGlobals(){\n        this.update()\n\n        this.clients.forEach(client => {\n          client.allowedips = this.server.allowedips\n          this.updateClient(client)\n        })\n      },\n\n      update() {\n        // convert int values\n        this.server.listenPort = parseInt(this.server.listenPort, 10);\n        this.server.persistentKeepalive = parseInt(this.server.persistentKeepalive, 10);\n        this.server.mtu = parseInt(this.server.mtu, 10);\n\n        // check server addresses\n        if (this.server.address.length < 1) {\n          this.errorServer('Please provide at least one valid CIDR address for server interface');\n          return;\n        }\n        for (let i = 0; i < this.server.address.length; i++){\n          if (this.$isCidr(this.server.address[i]) === 0) {\n            this.errorServer(`Invalid CIDR detected, please correct ${this.server.address[i]} before submitting`);\n            return\n          }\n        }\n\n        // check DNS correct\n        for (let i = 0; i < this.server.dns.length; i++){\n          if (this.$isCidr(this.server.dns[i] + '/32') === 0) {\n            this.errorServer(`Invalid IP detected, please correct ${this.server.dns[i]} before submitting`);\n            return\n          }\n        }\n\n        // check client AllowedIPs\n        if (this.server.allowedips.length < 1) {\n          this.errorServer('Please provide at least one valid CIDR address for client allowed IPs');\n          return;\n        }\n        for (let i = 0; i < this.server.allowedips.length; i++){\n          if (this.$isCidr(this.server.allowedips[i]) === 0) {\n            this.errorServer('Invalid CIDR detected, please correct before submitting');\n            return\n          }\n        }\n\n        this.updateServer(this.server)\n      },\n\n      forceFileDownload(){\n        const url = window.URL.createObjectURL(new Blob([this.config]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', 'wg0.conf') //or any other extension\n        document.body.appendChild(link)\n        link.click()\n      },\n    }\n  };\n</script>\n"]}]}